package flat/path

import flat/log/Logger
import flatlang/datastruct/HashMap
import flatlang/io/File
import flatlang/io/FileWriter

import static flat/colorizer/Colorizer
import static flat/regedit/RegEdit
import static flat/elevate/Elevate

class {
  let static Logger log = Logger(Path.class)

  public static async appendToUserPath(
    String value,
    Bool requireValidDirectory = true,
    Bool skipIfAlreadyExistsInPath = true
  ) {
    let sanitizedValue = value.trimStart(';').trimEnd(';').replace("/", "\\").trim()

    if (requireValidDirectory && !File(sanitizedValue).isDirectory) {
      throw Exception("Directory \"#{sanitizedValue}\" does not exist")
    }

    let environment = RegEdit.list("HKCU\\Environment")
    log.trace("Retreived environment from registry: #{environment.toJson()}")

    let HashMap values = (HashMap)environment["values"]

    var String pathKeyName

    values
      .filter({ _.key.toString().toLowerCase() == "path" })
      :forEach({ pathKeyName = _.key.toString() })

    if (!pathKeyName) {
      throw Exception("Environment does not contain Path entry")
    }

    let HashMap pathMap = (HashMap)values[pathKeyName]
    let String path = (String)pathMap["value"]
    log.debug("Retreived path from registry: #{path}")

    let sanitizedPath = path.endsWith(";") ? path : "#{path};"

    if (skipIfAlreadyExistsInPath && sanitizedPath.contains("#{sanitizedValue};")) {
      log.debug("Value already exists in Path entry. Skipping adding it")
      return
    }

    log.debug("Appending value \"#{value}\" to path")

    let putRequest = HashMap():add(
      "Path",
      HashMap()
        :add("type", "REG_EXPAND_SZ")
        :add("value", "#{sanitizedPath}#{sanitizedValue};")
    )

    RegEdit.putValue("HKCU\\Environment", putRequest)
  }

  public static async broadcastPathChange() {
    let script = File(System.homeDirectory + "/.flat/bin/RefreshEnv.cmd")

    if (!script.isFile) {
      log.trace("RefreshEnv.cmd does not exist. Writing it to file \"#{script.normalizedLocation}\"")

      FileWriter(script)
        :write("|
          @echo off
          ::
          :: RefreshEnv.cmd
          ::
          :: Batch file to read environment variables from registry and
          :: set session variables to these values.
          ::
          :: With this batch file, there should be no need to reload command
          :: environment every time you want environment changes to propagate

          ::echo \"RefreshEnv.cmd only works from cmd.exe, please install the Chocolatey Profile to take advantage of refreshenv from PowerShell\"
          echo | set /p dummy=\"Refreshing environment variables from registry for cmd.exe. Please wait...\"

          goto main

          :: Set one environment variable from registry key
          :SetFromReg
              \"%WinDir%\\System32\\Reg\" QUERY \"%~1\" /v \"%~2\" > \"%TEMP%\\_envset.tmp\" 2>NUL
              for /f \"usebackq skip=2 tokens=2,*\" %%A IN (\"%TEMP%\\_envset.tmp\") do (
                  echo/set \"%~3=%%B\"
              )
              goto :EOF

          :: Get a list of environment variables from registry
          :GetRegEnv
              \"%WinDir%\\System32\\Reg\" QUERY \"%~1\" > \"%TEMP%\\_envget.tmp\"
              for /f \"usebackq skip=2\" %%A IN (\"%TEMP%\\_envget.tmp\") do (
                  if /I not \"%%~A\"==\"Path\" (
                      call :SetFromReg \"%~1\" \"%%~A\" \"%%~A\"
                  )
              )
              goto :EOF

          :main
              echo/@echo off >\"%TEMP%\\_env.cmd\"

              :: Slowly generating final file
              call :GetRegEnv \"HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\Environment\" >> \"%TEMP%\\_env.cmd\"
              call :GetRegEnv \"HKCU\\Environment\">>\"%TEMP%\\_env.cmd\" >> \"%TEMP%\\_env.cmd\"

              :: Special handling for PATH - mix both User and System
              call :SetFromReg \"HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\Environment\" Path Path_HKLM >> \"%TEMP%\\_env.cmd\"
              call :SetFromReg \"HKCU\\Environment\" Path Path_HKCU >> \"%TEMP%\\_env.cmd\"

              :: Caution: do not insert space-chars before >> redirection sign
              echo/set \"Path=%%Path_HKLM%%;%%Path_HKCU%%\" >> \"%TEMP%\\_env.cmd\"

              :: Cleanup
              del /f /q \"%TEMP%\\_envset.tmp\" 2>nul
              del /f /q \"%TEMP%\\_envget.tmp\" 2>nul

              :: capture user / architecture
              SET \"OriginalUserName=%USERNAME%\"
              SET \"OriginalArchitecture=%PROCESSOR_ARCHITECTURE%\"

              :: Set these variables
              call \"%TEMP%\\_env.cmd\"

              :: Cleanup
              del /f /q \"%TEMP%\\_env.cmd\" 2>nul

              :: reset user / architecture
              SET \"USERNAME=%OriginalUserName%\"
              SET \"PROCESSOR_ARCHITECTURE=%OriginalArchitecture%\"

              echo | set /p dummy=\"Finished.\"
              echo .
          |")
        :close()
    } else {
      log.trace("RefreshEnv.cmd exists")
    }

    System.execute(script.normalizedLocation)
  }
}
